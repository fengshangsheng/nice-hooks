{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Projects */
    // "incremental": true,                              /* 启用增量编译 */
    // "composite": true,                                /* 启用允许 TypeScript 项目与项目引用一起使用的约束。 */
    // "tsBuildInfoFile": "./",                          /* 指定 .tsbuildinfo 增量编译文件的文件夹。*/
    // "disableSourceOfProjectReferenceRedirect": true,  /* 引用复合项目时禁用首选源文件而不是声明文件*/
    // "disableSolutionSearching": true,                 /* 编辑时选择项目退出多项目参考检查。*/
    // "disableReferencedProjectLoad": true,             /* 减少 TypeScript 自动加载的项目数量。*/

    /* Language and Environment */
    "target": "es2016",                                  /* 为发出的 JavaScript 设置 JavaScript 语言版本并包含兼容的库声明。*/
    // "lib": [],                                        /* 指定一组描述目标运行时环境的捆绑库声明文件。*/
    // "jsx": "preserve",                                /* 指定生成的 JSX 代码。*/
    // "experimentalDecorators": true,                   /* 启用对 TC39 第 2 阶段草稿装饰器的实验性支持。 */
    // "emitDecoratorMetadata": true,                    /* 为源文件中的修饰声明发出设计类型元数据。 */
    // "jsxFactory": "",                                 /* 指定针对 React JSX 发射时使用的 JSX 工厂函数，例如'React.createElement' 或 'h' */
    // "jsxFragmentFactory": "",                         /* 指定针对 React JSX 发射时用于片段的 JSX 片段引用，例如“React.Fragment”或“Fragment”。 */
    // "jsxImportSource": "",                            /* 指定使用 `jsx: react-jsx` 时用于导入 JSX 工厂函数的模块说明符。 */
    // "reactNamespace": "",                             /* 指定为“createElement”调用的对象。这仅适用于以 `react` JSX 发射为目标的情况。 */
    // "noLib": true,                                    /* 禁用包含任何库文件，包括默认的 lib.d.ts。 */
    // "useDefineForClassFields": true,                  /* 发出符合 ECMAScript 标准的类字段。 */

    /* Modules */
    "module": "esnext",                                /* 指定生成什么模块代码。 */
    // "rootDir": "./",                                  /* 在源文件中指定根文件夹. */
    // "moduleResolution": "node",                       /* 指定 TypeScript 如何从给定的模块说明符中查找文件。*/
    // "baseUrl": "./",                                  /* 指定基目录以解析非相对模块名称。 */
    // "paths": {},                                      /* 指定一组将导入重新映射到其他查找位置的条目。*/
    // "rootDirs": [],                                   /* 解析模块时允许将多个文件夹视为一个。*/
    // "typeRoots": [],                                  /* 指定多个类似于 `.node_modules@types` 的文件夹。*/
    // "types": [],                                      /* 指定要包含的类型包名称，而不在源文件中引用。*/
    // "allowUmdGlobalAccess": true,                     /* 允许从模块访问 UMD 全局变量。 */
    // "resolveJsonModule": true,                        /* 启用导入 .json 文件*/
    // "noResolve": true,                                /* 禁止 `import`s、`require`s 或 `<reference>`s 扩展 TypeScript 应添加到项目中的文件数量。*/

    /* JavaScript Support */
    // "allowJs": true,                                  /* 允许 JavaScript 文件成为程序的一部分。使用 `checkJS` 选项从这些文件中获取错误。*/
    // "checkJs": true,                                  /* 在类型检查的 JavaScript 文件中启用错误报告。*/
    // "maxNodeModuleJsDepth": 1,                        /* 指定用于从 `node_modules` 检查 JavaScript 文件的最大文件夹深度。仅适用于 `allowJs`。*/

    /* Emit */
     "declaration": true,                              /* 从项目中的 TypeScript 和 JavaScript 文件生成 .d.ts 文件。 */
//     "declarationMap": true,                           /* 为 d.ts 文件创建源映射。 */
//     "emitDeclarationOnly": true,                      /* 只输出 d.ts 文件，不输出 JavaScript 文件。 */
//     "sourceMap": true,                                /* 为发出的 JavaScript 文件创建源映射文件。 */
//     "outFile": "./",                                  /* 指定将所有输出捆绑到一个 JavaScript 文件中的文件。如果 `declaration` 为真，还指定一个捆绑所有 .d.ts 输出的文件。 */
//     "outDir": "./",                                   /* 为所有发出的文件指定一个输出文件夹。 */
    // "removeComments": true,                           /* 禁用发出评论。 */
    // "noEmit": true,                                   /* 禁用从编译中发出文件。 */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing `const enum` declarations in generated code. */
     "declarationDir": "dist",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */
    // "strictNullChecks": true,                         /* When type checking, take into account `null` and `undefined`. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when `this` is given the type `any`. */
    // "useUnknownInCatchVariables": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when a local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Include 'undefined' in index signature results */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  }
}
